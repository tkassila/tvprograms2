    
import {h, Fragment, Component, createRef } from 'preact';
import { useState } from 'preact/hooks';
//import Chips from 'preact-material-components/Chips';
//import 'preact-material-components/Chips/style.css';
import Card from 'preact-material-components/Card';
import 'preact-material-components/Card/style.css';
import Dialog from 'preact-material-components/Dialog';
import 'preact-material-components/Dialog/style.css';
import 'preact-material-components/Theme/style.css';
import Button from 'preact-material-components/Button';
import 'preact-material-components/Button/style.css';
import 'preact-material-components/Theme/style.css';
import Formfield from 'preact-material-components/FormField';
import 'preact-material-components/Checkbox/style.css';

import LayoutGrid from 'preact-material-components/LayoutGrid';
import 'preact-material-components/LayoutGrid/style.css';

import Config from '../../utils/Config';

/**
 * This Address function is showing a programgrid or -list.
 */
// class Address extends Component 
class ShowProgram extends Component
{

    scrollingDlgRef = null;

    constructor(props){
        super(props);
        this.state = {
            count: 0,
            displaydescription: false,
            displayAllDescriptions: props.displayAllDescriptions,
        };
        this.scrollingDlgRef = createRef();
    }

    increment = () => { this.setState({count: count + 1}); }
    // You can also pass a callback to the setter
    decrement = () => { this.setState({count: count - 1}); }

    onClickDisplay = (event) => {     
        event.preventDefault();   
//   console.log("onClickDisplay");
        if (this.state.displayAllDescriptions)
            return;
        if (!this.state.displaydescription)
            this.scrollingDlgRef.current.MDComponent.show();
        this.setState({displaydescription: ! this.state.displaydescription });
    }

    onClickDisplayDialog = (event) => {     
        event.preventDefault();   
   //    console.log("onClickDisplayDialog");
        if (this.state.displaydescription)
            this.scrollingDlgRef.current.MDComponent.close();
        this.setState({displaydescription: ! this.state.displaydescription });
    }

    componentDidMount()
	{
        /*
        console.log("componentDidMount");
        console.log("this.scrollingDlgRef");
        console.log(this.scrollingDlgRef);
        */
    }

    
    componentWillReceiveProps(nextProps) 
	{
	  if (Config.bDebug)
	  {
		console.log("ShowProgram componentWillReceiveProps nextProps"); 
		console.log(nextProps); 				
	  }

      this.setState({ displayAllDescriptions: nextProps.displayAllDescriptions
					});
    }

        /*
        	jsonitem.title = item.getElementsByTagName("title")[0].childNodes[0].nodeValue;
		jsonitem.description = item.getElementsByTagName("description")[0].childNodes[0].nodeValue;
		jsonitem.pubdate = item.getElementsByTagName("pubDate")[0].childNodes[0].nodeValue;
		jsonitem.link =

          <Chips.Chip onClick={onClickDisplay} >
                    <Chips.Text>{data.title}</Chips.Text></Chips.Chip> : <Chips.Chip onClick={onClickDisplay}>
                    <Chips.Text>Kissa</Chips.Text></Chips.Chip> }

                     {(!displaydescription ? 
                <Button onClick={onClickDisplay} >
                    {data.title}</Button> : <Chips.Chip onClick={onClickDisplay}>
                    <Chips.Text>Kissa</Chips.Text></Chips.Chip>) }

                                 <p>Count: {count}</p>
            <button onClick={increment}>Increment</button>
            <button onClick={decrement}>Decrement</button>

                <Chips.Text>{props.data.title}</Chips.Text></Chips.Chip> 
        */

    openHtmlPage = (event) =>
    {
        console.log("openHtmlPage");
        event.preventDefault();
        let blankurl = event.target.href;
        console.log("blankurl");
        console.log(blankurl);
       // window.open(blankurl, '_blank', "Telkussa", "location=no");
        window.open(blankurl, '_blank', "Telkussa");
        return false;
    }

    render(props, state) {
        return (           
            <div>
                <div onClick={this.onClickDisplay} >                  
                    <p><b>{props.showSearch && props.data.titleindex != undefined
                    ? props.getPOfIndex(props.data.titleindex, props.data.title) 
                    : props.data.title}</b></p>
                    {state.displayAllDescriptions ? 
                    <Fragment><p>{ props.showSearch && props.data.descriptionindex != undefined
                        ? props.getPOfIndex(props.data.descriptionindex, 
                            props.data.description) 
                        : props.data.description }</p>
                        {props.data.link != undefined || props.data.link != null ?
                        <p><a href={props.data.link} onClick={this.openHtmlPage} >ohjelmalinkki</a></p> : null} 
                        </Fragment> : null}
                    
                    <Dialog 
                               ref={this.scrollingDlgRef}>
                                <Dialog.Header>{props.channel}</Dialog.Header>
                                <Dialog.Body scrollable={true}>
                                  <Card><div class="card-header">
                                     <h3 tabIndex="0" class=" mdc-typography--title">
                                         {props.data.title}</h3>
                                     <h3 tabIndex="0" class=" mdc-typography--title">
                                         {props.data.description}</h3><br/>
                                     </div>
                                     <Card.Media className="card-media" />
                                  </Card>
                                </Dialog.Body>
                                <Dialog.Footer>
                                    <Dialog.FooterButton onCancel={this.onClickDisplayDialog} cancel={true} accept={true}>Sulje</Dialog.FooterButton>
                                </Dialog.Footer>
                    </Dialog> 
                    </div>
            </div>

          );
   }
}

export default ShowProgram;